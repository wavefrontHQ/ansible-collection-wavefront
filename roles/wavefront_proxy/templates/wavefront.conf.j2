# {{ ansible_managed }}
#
# Wavefront proxy configuration file
#
#   Typically in /etc/wavefront/wavefront-proxy/wavefront.conf
#
########################################################################################################################
# Wavefront API endpoint URL. Usually the same as the URL of your Wavefront instance, with an `api`
# suffix -- or Wavefront provides the URL.
server={{ wavefront_api_endpoint }}

# The hostname will be used to identify the internal proxy statistics around point rates, JVM info, etc.
# We strongly recommend setting this to a name that is unique among your entire infrastructure, to make this
# proxy easy to identify. This hostname does not need to correspond to any actual hostname or DNS entry; it's merely
# a string that we pass with the internal stats and ~proxy.* metrics.
#hostname=my.proxy.host.com

# The Token is any valid API token for an account that has *Proxy Management* permissions. To get to the token:
# 1. Click the gear icon at the top right in the Wavefront UI.
# 2. Click your account name (usually your email)
# 3. Click *API access*.
token={{ wavefront_api_token }}

####################################################### INPUTS #########################################################
# Comma-separated list of ports to listen on for Wavefront formatted data (Default: 2878)
pushListenerPorts={{ wavefront_proxy_port }}
## Maximum line length for received points in plaintext format on Wavefront/OpenTSDB/Graphite ports. Default: 32KB
#pushListenerMaxReceivedLength=32768
{% if wavefront_proxy_push_listener_max_received_length is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_push_listener_max_received_length }}
{% endif %}
## Maximum request size (in bytes) for incoming HTTP requests on Wavefront/OpenTSDB/Graphite ports. Default: 16MB
#pushListenerHttpBufferSize=16777216
{% if wavefront_proxy_push_listener_http_buffer_size is defined %}
pushListenerHttpBufferSize={{ wavefront_proxy_push_listener_http_buffer_size }}
{% endif %}
## Delta counter pre-aggregation settings.
## Comma-separated list of ports to listen on for Wavefront-formatted delta counters. Helps reduce
## outbound point rate by pre-aggregating delta counters at proxy. Default: none
#deltaCountersAggregationListenerPorts=12878
{% if wavefront_proxy_delta_counters_aggregation_listener_ports is defined %}
deltaCountersAggregationListenerPorts={{ wavefront_proxy_delta_counters_aggregation_listener_ports }}
{% endif %}
## Interval between flushing aggregating delta counters to Wavefront. Defaults to 30 seconds.
#deltaCountersAggregationIntervalSeconds=60
{% if wavefront_proxy_delta_counters_aggregation_interval_seconds is defined %}
deltaCountersAggregationIntervalSeconds={{ wavefront_proxy_delta_counters_aggregation_interval_seconds }}
{% endif %}
## Graphite input settings.
## If you enable either `graphitePorts` or `picklePorts`, make sure to uncomment and set `graphiteFormat` as well.
## Comma-separated list of ports to listen on for collectd/Graphite formatted data (Default: none)
#graphitePorts=2003
{% if wavefront_proxy_graphite_ports is defined %}
graphitePorts={{ wavefront_proxy_graphite_ports }}
{% endif %}
## Comma-separated list of ports to listen on for Graphite pickle formatted data (from carbon-relay) (Default: none)
#picklePorts=2004
{% if wavefront_proxy_pickle_ports is defined %}
picklePorts={{ wavefront_proxy_pickle_ports }}
{% endif %}
## Which fields (1-based) should we extract and concatenate (with dots) as the hostname?
#graphiteFormat=2
{% if wavefront_proxy_graphite_format is defined %}
graphiteFormat={{ wavefront_proxy_graphite_format }}
{% endif %}
## Which characters should be replaced by dots in the hostname, after extraction? (Default: _)
#graphiteDelimiters=_
{% if wavefront_proxy_graphite_delimiters is defined %}
graphiteDelimiters={{ wavefront_proxy_graphite_delimiters }}
{% endif %}
## Comma-separated list of fields (metric segments) to remove (1-based). This is an optional setting. (Default: none)
#graphiteFieldsToRemove=3,4,5
{% if wavefront_proxy_graphite_fields_to_remove is defined %}
graphiteFieldsToRemove={{ wavefront_proxy_graphite_fields_to_remove }}
{% endif %}

## DDI/Relay endpoint: in environments where no direct outbound connections to Wavefront servers are possible, you can
## use another Wavefront proxy that has outbound access to act as a relay and forward all the data received on that
## endpoint (from direct data ingestion clients and/or other proxies) to Wavefront servers.
## This setting is a comma-separated list of ports. (Default: none)
#pushRelayListenerPorts=2978
{% if wavefront_proxy_push_relay_listener_ports is defined %}
pushRelayListenerPorts={{ wavefront_proxy_push_relay_listener_ports }}
{% endif %}
## If true, aggregate histogram distributions received on the relay port.
## Please refer to histogram settings section below for more configuration options. Default: false
#pushRelayHistogramAggregator=false
{% if wavefront_proxy_push_relay_histogram_aggregator is defined %}
pushRelayHistogramAggregator={{ wavefront_proxy_push_relay_histogram_aggregator }}
{% endif %}

## Comma-separated list of ports to listen on for OpenTSDB formatted data (Default: none)
#opentsdbPorts=4242
{% if wavefront_proxy_opentsdb_ports is defined %}
opentsdbPorts={{ wavefront_proxy_opentsdb_ports }}
{% endif %}

## Comma-separated list of ports to listen on for HTTP JSON formatted data (Default: none)
#jsonListenerPorts=3878
{% if wavefront_proxy_json_listener_ports is defined %}
jsonListenerPorts={{ wavefront_proxy_json_listener_ports }}
{% endif %}

## Comma-separated list of ports to listen on for HTTP collectd write_http data (Default: none)
#writeHttpJsonListenerPorts=4878
{% if wavefront_proxy_write_http_json_listener_ports is defined %}
writeHttpJsonListenerPorts={{ wavefront_proxy_write_http_json_listener_ports }}
{% endif %}

################################################# DATA PREPROCESSING ###################################################
## Path to the optional config file with preprocessor rules (advanced regEx replacements and allow/block lists)
#preprocessorConfigFile=/etc/wavefront/wavefront-proxy/preprocessor_rules.yaml
{% if wavefront_proxy_preprocessor_config_file is defined %}
preprocessorConfigFile={{ wavefront_proxy_preprocessor_config_file }}
{% endif %}

## When using the Wavefront or TSDB data formats, the proxy will automatically look for a tag named
## source= or host= (preferring source=) and treat that as the source/host within Wavefront.
## customSourceTags is a comma-separated, ordered list of additional tag keys to use if neither
## source= or host= is present
#customSourceTags=fqdn, hostname
{% if wavefront_proxy_custom_source_tags is defined %}
customSourceTags={{ wavefront_proxy_custom_source_tags }}
{% endif %}

## The prefix should either be left undefined, or can be any  prefix you want
## prepended to all data points coming through this proxy (such as `production`).
#prefix=production
{% if wavefront_proxy_prefix is defined %}
prefix={{ wavefront_proxy_prefix }}
{% endif %}

## Regex pattern (Java) that input lines must match to be accepted. Use preprocessor rules for finer control.
#allow=^(production|stage).*
{% if wavefront_proxy_allow is defined %}
allow={{ wavefront_proxy_allow }}
{% endif %}
## Regex pattern (Java) that input lines must NOT match to be accepted. Use preprocessor rules for finer control.
#block=^(qa|development|test).*
{% if wavefront_proxy_block is defined %}
block={{ wavefront_proxy_block }}
{% endif %}

## This setting defines the cut-off point for what is considered a valid timestamp for back-dated points.
## Default (and recommended) value is 8760 (1 year), so all the data points from more than 1 year ago will be rejected.
#dataBackfillCutoffHours=8760
{% if wavefront_proxy_data_backfill_cutoff_hours is defined %}
dataBackfillCutoffHours={{ wavefront_proxy_data_backfill_cutoff_hours }}
{% endif %}
## This setting defines the cut-off point for what is considered a valid timestamp for pre-dated points.
## Default (and recommended) value is 24 (1 day), so all the data points from more than 1 day in future will be rejected.
#dataPrefillCutoffHours=24
{% if wavefront_proxy_data_prefill_cutoff_hours is defined %}
dataPrefillCutoffHours={{ wavefront_proxy_data_prefill_cutoff_hours }}
{% endif %}

################################################## ADVANCED SETTINGS ###################################################
## Number of threads that flush data to the server. If not defined in wavefront.conf it defaults to
## the number of available vCPUs (min 4; max 16). Setting this value too large will result in sending
## batches that are too small to the server and wasting connections. This setting is per listening port.
#flushThreads=4
{% if wavefront_proxy_flush_threads is defined %}
flushThreads={{ wavefront_proxy_flush_threads }}
{% endif %}
## Max points per single flush. Default: 40000.
#pushFlushMaxPoints=40000
{% if wavefront_proxy_push_flush_max_points is defined %}
pushFlushMaxPoints={{ wavefront_proxy_push_flush_max_points }}
{% endif %}
## Max histograms per single flush. Default: 10000.
#pushFlushMaxHistograms=10000
{% if wavefront_proxy_push_flush_max_histograms is defined %}
pushFlushMaxHistograms={{ wavefront_proxy_push_flush_max_histograms }}
{% endif %}
## Max spans per single flush. Default: 5000.
#pushFlushMaxSpans=5000
{% if wavefront_proxy_push_flush_max_spans is defined %}
pushFlushMaxSpans={{ wavefront_proxy_push_flush_max_spans }}
{% endif %}
## Max span logs per single flush. Default: 1000.
#pushFlushMaxSpanLogs=1000
{% if wavefront_proxy_push_flush_max_span_logs is defined %}
pushFlushMaxSpanLogs={{ wavefront_proxy_push_flush_max_span_logs }}
{% endif %}

## Milliseconds between flushes to the Wavefront servers. Typically 1000.
#pushFlushInterval=1000
{% if wavefront_proxy_push_flush_interval is defined %}
pushFlushInterval={{ wavefront_proxy_push_flush_interval }}
{% endif %}

## Limit outbound points per second rate at the proxy. Default: do not throttle
#pushRateLimit=20000
{% if wavefront_proxy_push_rate_limit is defined %}
pushRateLimit={{ wavefront_proxy_push_rate_limit }}
{% endif %}
## Limit outbound histograms per second rate at the proxy. Default: do not throttle
#pushRateLimitHistograms=2000
{% if wavefront_proxy_push_rate_limit_histograms is defined %}
pushRateLimitHistograms={{ wavefront_proxy_push_rate_limit_histograms }}
{% endif %}
## Limit outbound spans per second rate at the proxy. Default: do not throttle
#pushRateLimitSpans=1000
{% if wavefront_proxy_push_rate_limit_spans is defined %}
pushRateLimitSpans={{ wavefront_proxy_push_rate_limit_spans }}
{% endif %}
## Limit outbound span logs per second rate at the proxy. Default: do not throttle
#pushRateLimitSpanLogs=1000
{% if wavefront_proxy_push_rate_limit_span_logs is defined %}
pushRateLimitSpanLogs={{ wavefront_proxy_push_rate_limit_span_logs }}
{% endif %}

## Max number of burst seconds to allow when rate limiting to smooth out uneven traffic.
## Set to 1 when doing data backfills. Default: 10
#pushRateLimitMaxBurstSeconds=10
{% if wavefront_proxy_push_rate_limit_max_burst_seconds is defined %}
pushRateLimitMaxBurstSeconds={{ wavefront_proxy_push_rate_limit_max_burst_seconds }}
{% endif %}

## Location of buffer.* files for saving failed transmissions for retry. Default: /var/spool/wavefront-proxy/buffer
#buffer=/var/spool/wavefront-proxy/buffer
{% if wavefront_proxy_buffer is defined %}
buffer={{ wavefront_proxy_buffer }}
{% endif %}
## Buffer file partition size, in MB. Setting this value too low may reduce the efficiency of disk
## space utilization, while setting this value too high will allocate disk space in larger
## increments. Default: 128
#bufferShardSize=128
{% if wavefront_proxy_buffer_shard_size is defined %}
bufferShardSize={{ wavefront_proxy_buffer_shard_size }}
{% endif %}
## Use single-file buffer (legacy functionality). Default: false
#disableBufferSharding=false
{% if wavefront_proxy_disable_buffer_sharding is defined %}
disableBufferSharding={{ wavefront_proxy_disable_buffer_sharding }}
{% endif %}

## For exponential backoff when retry threads are throttled, the base (a in a^b) in seconds.  Default 2.0
#retryBackoffBaseSeconds=2.0
{% if wavefront_proxy_retry_backoff_base_seconds is defined %}
retryBackoffBaseSeconds={{ wavefront_proxy_retry_backoff_base_seconds }}
{% endif %}
## Whether to split the push batch size when the push is rejected by Wavefront due to rate limit.  Default false.
#splitPushWhenRateLimited=false
{% if wavefront_proxy_split_push_when_rate_limited is defined %}
splitPushWhenRateLimited={{ wavefront_proxy_split_push_when_rate_limited }}
{% endif %}

## The following settings are used to connect to Wavefront servers through a HTTP proxy:
#proxyHost=localhost
{% if wavefront_proxy_proxy_host is defined %}
proxyHost={{ wavefront_proxy_proxy_host }}
{% endif %}
#proxyPort=8080
{% if wavefront_proxy_proxy_port is defined %}
proxyPort={{ wavefront_proxy_proxy_port }}
{% endif %}
## Optional: if http proxy requires authentication
#proxyUser=proxy_user
{% if wavefront_proxy_proxy_user is defined %}
proxyUser={{ wavefront_proxy_proxy_user }}
{% endif %}
#proxyPassword=proxy_password
{% if wavefront_proxy_proxy_password is defined %}
proxyPassword={{ wavefront_proxy_proxy_password }}
{% endif %}
## HTTP proxies may implement a security policy to only allow traffic with particular User-Agent header values.
## When set, overrides User-Agent in request headers for outbound HTTP requests.
#httpUserAgent=WavefrontProxy
{% if wavefront_proxy_http_user_agent is defined %}
httpUserAgent={{ wavefront_proxy_http_user_agent }}
{% endif %}

## HTTP client settings
## Control whether metrics traffic from the proxy to the Wavefront endpoint is gzip-compressed. Default: true
#gzipCompression=true
{% if wavefront_proxy_gzip_compression is defined %}
gzipCompression={{ wavefront_proxy_gzip_compression }}
{% endif %}
## If gzipCompression is enabled, sets compression level (1-9). Higher compression levels slightly reduce
## the volume of traffic between the proxy and Wavefront, but use more CPU. Default: 4
#gzipCompressionLevel=4
{% if wavefront_proxy_gzip_compression_level is defined %}
gzipCompressionLevel={{ wavefront_proxy_gzip_compression_level }}
{% endif %}
## Connect timeout (in milliseconds). Default: 5000 (5s)
#httpConnectTimeout=5000
{% if wavefront_proxy_http_connect_timeout is defined %}
httpConnectTimeout={{ wavefront_proxy_http_connect_timeout }}
{% endif %}
## Socket timeout (in milliseconds). Default: 10000 (10s)
#httpRequestTimeout=10000
{% if wavefront_proxy_http_request_timeout is defined %}
httpRequestTimeout={{ wavefront_proxy_http_request_timeout }}
{% endif %}
## Max number of total connections to keep open (Default: 200)
#httpMaxConnTotal=100
{% if wavefront_proxy_http_max_conn_total is defined %}
httpMaxConnTotal={{ wavefront_proxy_http_max_conn_total }}
{% endif %}
## Max connections per route to keep open (Default: 100)
#httpMaxConnPerRoute=100
{% if wavefront_proxy_http_max_conn_per_route is defined %}
httpMaxConnPerRoute={{ wavefront_proxy_http_max_conn_per_route }}
{% endif %}
## Number of times to retry http requests before queueing, set to 0 to disable (default: 3)
#httpAutoRetries=3
{% if wavefront_proxy_http_auto_retries is defined %}
httpAutoRetries={{ wavefront_proxy_http_auto_retries }}
{% endif %}

## Close idle inbound connections after specified time in seconds. Default: 300 (5 minutes)
#listenerIdleConnectionTimeout=300
{% if wavefront_proxy_listener_idle_connection_timeout is defined %}
listenerIdleConnectionTimeout={{ wavefront_proxy_listener_idle_connection_timeout }}
{% endif %}
## When receiving Wavefront-formatted data without source/host specified, use remote IP address as
## source instead of trying to resolve the DNS name. Default false.
#disableRdnsLookup=true
{% if wavefront_proxy_disable_rdns_lookup is defined %}
disableRdnsLookup={{ wavefront_proxy_disable_rdns_lookup }}
{% endif %}
## The following setting enables SO_LINGER on listening ports with the specified linger time in seconds (Default: off)
#soLingerTime=0
{% if wavefront_proxy_so_linger_time is defined %}
soLingerTime={{ wavefront_proxy_so_linger_time }}
{% endif %}

## Max number of points that can stay in memory buffers before spooling to disk. Defaults to 16 * pushFlushMaxPoints,
## minimum allowed size: pushFlushMaxPoints. Setting this value lower than default reduces memory usage but will force
## the proxy to spool to disk more frequently if you have points arriving at the proxy in short bursts.
#pushMemoryBufferLimit=640000
{% if wavefront_proxy_push_memory_buffer_limit is defined %}
pushMemoryBufferLimit={{ wavefront_proxy_push_memory_buffer_limit }}
{% endif %}

## If there are blocked points, a small sampling of them can be written into the main log file.
## This setting how many lines to print to the log every 10 seconds. Typically 5.
#pushBlockedSamples=5
{% if wavefront_proxy_push_blocked_samples is defined %}
pushBlockedSamples={{ wavefront_proxy_push_blocked_samples }}
{% endif %}
## When logging blocked points is enabled (see https://docs.wavefront.com/proxies_configuring.html#blocked-point-log
## for more details), by default all blocked points/histograms/spans etc are logged into the same `RawBlockedPoints`
## logger. Settings below allow finer control over these loggers:
## Logger name for blocked points. Default: RawBlockedPoints.
#blockedPointsLoggerName=RawBlockedPoints
{% if wavefront_proxy_blocked_points_logger_name is defined %}
blockedPointsLoggerName={{ wavefront_proxy_blocked_points_logger_name }}
{% endif %}
## Logger name for blocked histograms. Default: RawBlockedPoints.
#blockedHistogramsLoggerName=RawBlockedPoints
{% if wavefront_proxy_blocked_histograms_logger_name is defined %}
blockedHistogramsLoggerName={{ wavefront_proxy_blocked_histograms_logger_name }}
{% endif %}
## Logger name for blocked spans. Default: RawBlockedPoints.
#blockedSpansLoggerName=RawBlockedPoints
{% if wavefront_proxy_blocked_spans_logger_name is defined %}
blockedSpansLoggerName={{ wavefront_proxy_blocked_spans_logger_name }}
{% endif %}

## Discard all received data (debug/performance test mode). If enabled, you will lose received data! Default: false
#useNoopSender=false
{% if wavefront_proxy_use_noop_sender is defined %}
useNoopSender={{ wavefront_proxy_use_noop_sender }}
{% endif %}

## Settings for incoming HTTP request authentication. Authentication is done by a token, proxy is looking for
token={{ wavefront_api_token }}
## "Authorization: Bearer", "Authorization: " headers). TCP streams are disabled when authentication is turned on.
## Allowed authentication methods: NONE, STATIC_TOKEN, HTTP_GET, OAUTH2. Default: NONE
## - NONE: All requests are considered valid
## - STATIC_TOKEN: Compare incoming token with the value of authStaticToken setting.
## - OAUTH2: Validate all tokens against a RFC7662-compliant token introspection endpoint.
## - HTTP_GET: Validate all tokens against a specific URL. Use {{ '{{' }}token{{ '}}' }} placeholder in the URL to pass the token
##             in question to the endpoint. Use of https is strongly recommended for security reasons. The endpoint
##             must return any 2xx status for valid tokens, any other response code is considered a fail.
#authMethod=NONE
{% if wavefront_proxy_auth_method is defined %}
authMethod={{ wavefront_proxy_auth_method }}
{% endif %}
## URL for the token introspection endpoint used to validate tokens for incoming HTTP requests.
## Required when authMethod is OAUTH2 or HTTP_GET
#authTokenIntrospectionServiceUrl=https://auth.acme.corp/api/token/{{ '{{' }}token{{ '}}' }}/validate
{% if wavefront_proxy_auth_token_introspection_service_url is defined %}
authTokenIntrospectionServiceUrl={{ wavefront_proxy_auth_token_introspection_service_url }}
{% endif %}
## Optional credentials for use with the token introspection endpoint if it requires authentication.
#authTokenIntrospectionAuthorizationHeader=Authorization: Bearer <token>
{% if wavefront_proxy_auth_token_introspection_authorization_header is defined %}
authTokenIntrospectionAuthorizationHeader={{ wavefront_proxy_auth_token_introspection_authorization_header }}
{% endif %}
## Cache TTL (in seconds) for token validation results (re-authenticate when expired). Default: 600 seconds
#authResponseRefreshInterval=600
{% if wavefront_proxy_auth_response_refresh_interval is defined %}
authResponseRefreshInterval={{ wavefront_proxy_auth_response_refresh_interval }}
{% endif %}
## Maximum allowed cache TTL (in seconds) for token validation results when token introspection service is
## unavailable. Default: 86400 seconds (1 day)
#authResponseMaxTtl=86400
{% if wavefront_proxy_auth_response_max_ttl is defined %}
authResponseMaxTtl={{ wavefront_proxy_auth_response_max_ttl }}
{% endif %}
## Static token that is considered valid for all incoming HTTP requests. Required when authMethod = STATIC_TOKEN.
#authStaticToken=token1234abcd
{% if wavefront_proxy_auth_static_token is defined %}
authStaticToken={{ wavefront_proxy_auth_static_token }}
{% endif %}

## Enables intelligent traffic shaping based on received rate over last 5 minutes. Default: disabled
#trafficShaping=false
{% if wavefront_proxy_traffic_shaping is defined %}
trafficShaping={{ wavefront_proxy_traffic_shaping }}
{% endif %}
## Sets the width (in seconds) for the sliding time window which would be used to calculate received
## traffic rate. Default: 600 (10 minutes)
#trafficShapingWindowSeconds=600
{% if wavefront_proxy_traffic_shaping_window_seconds is defined %}
trafficShapingWindowSeconds={{ wavefront_proxy_traffic_shaping_window_seconds }}
{% endif %}
## Sets the headroom multiplier to use for traffic shaping when there's backlog. Default: 1.15 (15% headroom)
#trafficShapingHeadroom=1.15
{% if wavefront_proxy_traffic_shaping_headroom is defined %}
trafficShapingHeadroom={{ wavefront_proxy_traffic_shaping_headroom }}
{% endif %}

## Enables CORS for specified comma-delimited list of listening ports. Default: none (CORS disabled)
#corsEnabledPorts=2879
{% if wavefront_proxy_cors_enabled_ports is defined %}
corsEnabledPorts={{ wavefront_proxy_cors_enabled_ports }}
{% endif %}
## Allowed origin for CORS requests, or '*' to allow everything. Default: none
#corsOrigin=*
{% if wavefront_proxy_cors_origin is defined %}
corsOrigin={{ wavefront_proxy_cors_origin }}
{% endif %}
## Allow 'null' origin for CORS requests. Default: false
#corsAllowNullOrigin=false
{% if wavefront_proxy_cors_allow_null_origin is defined %}
corsAllowNullOrigin={{ wavefront_proxy_cors_allow_null_origin }}
{% endif %}

## Enables TLS for specified listening ports (comma-separated list). Use '*' to secure all ports. Defaut: none (TLS disabled)
#tlsPorts=4443
{% if wavefront_proxy_tls_ports is defined %}
tlsPorts={{ wavefront_proxy_tls_ports }}
{% endif %}
## TLS certificate path to use for securing all the ports. X.509 certificate chain file in PEM format.
#privateCertPath=/etc/wavefront/wavefront-proxy/cert.pem
{% if wavefront_proxy_private_cert_path is defined %}
privateCertPath={{ wavefront_proxy_private_cert_path }}
{% endif %}
## TLS private key path to use for securing all the ports. PKCS#8 private key file in PEM format.
#privateKeyPath=/etc/wavefront/wavefront-proxy/private_key.pem
{% if wavefront_proxy_private_key_path is defined %}
privateKeyPath={{ wavefront_proxy_private_key_path }}
{% endif %}

########################################### MANAGED HEALTHCHECK ENDPOINT ###############################################
## Comma-delimited list of ports to function as standalone healthchecks. May be used independently of
## httpHealthCheckAllPorts parameter. Default: none
#httpHealthCheckPorts=8880
{% if wavefront_proxy_http_health_check_ports is defined %}
httpHealthCheckPorts={{ wavefront_proxy_http_health_check_ports }}
{% endif %}
## When true, all listeners that support HTTP protocol also respond to healthcheck requests. May be
## used independently of httpHealthCheckPorts parameter. Default: false
#httpHealthCheckAllPorts=true
{% if wavefront_proxy_http_health_check_all_ports is defined %}
httpHealthCheckAllPorts={{ wavefront_proxy_http_health_check_all_ports }}
{% endif %}
## Healthcheck's path, for example, '/health'. Default: '/'
#httpHealthCheckPath=/status
{% if wavefront_proxy_http_health_check_path is defined %}
httpHealthCheckPath={{ wavefront_proxy_http_health_check_path }}
{% endif %}
## Optional Content-Type to use in healthcheck response, for example, 'application/json'. Default: none
#httpHealthCheckResponseContentType=text/plain
{% if wavefront_proxy_http_health_check_response_content_type is defined %}
httpHealthCheckResponseContentType={{ wavefront_proxy_http_health_check_response_content_type }}
{% endif %}
## HTTP status code for 'pass' health checks. Default: 200
#httpHealthCheckPassStatusCode=200
{% if wavefront_proxy_http_health_check_pass_status_code is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_http_health_check_pass_status_code }}
{% endif %}
## Optional response body to return with 'pass' health checks. Default: none
#httpHealthCheckPassResponseBody=good to go!
{% if wavefront_proxy_http_health_check_pass_response_body is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_http_health_check_pass_response_body }}
{% endif %}
## HTTP status code for 'fail' health checks. Default: 503
#httpHealthCheckFailStatusCode=503
{% if wavefront_proxy_http_health_check_fail_status_code is defined %}
httpHealthCheckFailStatusCode={{ wavefront_proxy_http_health_check_fail_status_code }}
{% endif %}
## Optional response body to return with 'fail' health checks. Default: none
#httpHealthCheckFailResponseBody=try again later...
{% if wavefront_proxy_http_health_check_fail_response_body is defined %}
httpHealthCheckFailResponseBody={{ wavefront_proxy_http_health_check_fail_response_body }}
{% endif %}
## Enables admin port to control healthcheck status per port. Default: none
#adminApiListenerPort=8888
{% if wavefront_proxy_admin_api_listener_port is defined %}
adminApiListenerPort={{ wavefront_proxy_admin_api_listener_port }}
{% endif %}
## Remote IPs must match this regex to access admin API
#adminApiRemoteIpAllowRegex=^.*$
{% if wavefront_proxy_admin_api_remote_ip_allow_regex is defined %}
adminApiRemoteIpAllowRegex={{ wavefront_proxy_admin_api_remote_ip_allow_regex }}
{% endif %}

############################################# LOGS TO METRICS SETTINGS #################################################
## Port on which to listen for FileBeat data (Lumberjack protocol). Default: none
#filebeatPort=5044
{% if wavefront_proxy_filebeat_port is defined %}
filebeatPort={{ wavefront_proxy_filebeat_port }}
{% endif %}
## Port on which to listen for raw logs data (TCP and HTTP). Default: none
#rawLogsPort=5045
{% if wavefront_proxy_raw_logs_port is defined %}
rawLogsPort={{ wavefront_proxy_raw_logs_port }}
{% endif %}
## Maximum line length for received raw logs (Default: 4096)
#rawLogsMaxReceivedLength=4096
{% if wavefront_proxy_raw_logs_max_received_length is defined %}
rawLogsMaxReceivedLength={{ wavefront_proxy_raw_logs_max_received_length }}
{% endif %}
## Maximum allowed request size (in bytes) for incoming HTTP requests with raw logs (Default: 16MB)
#rawLogsHttpBufferSize=16777216
{% if wavefront_proxy_raw_logs_http_buffer_size is defined %}
rawLogsHttpBufferSize={{ wavefront_proxy_raw_logs_http_buffer_size }}
{% endif %}
## Location of the `logsingestion.yaml` configuration file
#logsIngestionConfigFile=/etc/wavefront/wavefront-proxy/logsingestion.yaml
{% if wavefront_proxy_logs_ingestion_config_file is defined %}
logsIngestionConfigFile={{ wavefront_proxy_logs_ingestion_config_file }}
{% endif %}

########################################### DISTRIBUTED TRACING SETTINGS ###############################################
## Comma-separated list of ports to listen on for spans in Wavefront format. Defaults to none.
#traceListenerPorts=30000
{% if wavefront_proxy_trace_listener_ports is defined %}
traceListenerPorts={{ wavefront_proxy_trace_listener_ports }}
{% endif %}
## Maximum line length for received spans and span logs (Default: 1MB)
#traceListenerMaxReceivedLength=1048576
{% if wavefront_proxy_trace_listener_max_received_length is defined %}
traceListenerMaxReceivedLength={{ wavefront_proxy_trace_listener_max_received_length }}
{% endif %}
## Maximum allowed request size (in bytes) for incoming HTTP requests on tracing ports (Default: 16MB)
#traceListenerHttpBufferSize=16777216
{% if wavefront_proxy_trace_listener_http_buffer_size is defined %}
traceListenerHttpBufferSize={{ wavefront_proxy_trace_listener_http_buffer_size }}
{% endif %}

## Comma-separated list of ports to listen on for spans from SDKs that send raw data. Unlike
## `traceListenerPorts` setting, also derives RED metrics based on received spans. Defaults to none.
#customTracingListenerPorts=30001
{% if wavefront_proxy_custom_tracing_listener_ports is defined %}
customTracingListenerPorts={{ wavefront_proxy_custom_tracing_listener_ports }}
{% endif %}
## Custom application name for spans received on customTracingListenerPorts. Defaults to defaultApp.
#customTracingApplicationName=defaultApp
{% if wavefront_proxy_custom_tracing_application_name is defined %}
customTracingApplicationName={{ wavefront_proxy_custom_tracing_application_name }}
{% endif %}
## Custom service name for spans received on customTracingListenerPorts. Defaults to defaultService.
#customTracingServiceName=defaultService
{% if wavefront_proxy_custom_tracing_service_name is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_custom_tracing_service_name }}
{% endif %}

## Comma-separated list of ports on which to listen on for Jaeger Thrift formatted data over TChannel protocol. Defaults to none.
#traceJaegerListenerPorts=14267
{% if wavefront_proxy_trace_jaeger_listener_ports is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_trace_jaeger_listener_ports }}
{% endif %}
## Comma-separated list of ports on which to listen on for Jaeger Thrift formatted data over HTTP. Defaults to none.
#traceJaegerHttpListenerPorts=14268
{% if wavefront_proxy_trace_jaeger_http_listener_ports is defined %}
traceJaegerHttpListenerPorts={{ wavefront_proxy_trace_jaeger_http_listener_ports }}
{% endif %}
## Comma-separated list of ports on which to listen on for Jaeger Protobuf formatted data over gRPC. Defaults to none.
#traceJaegerGrpcListenerPorts=14250
{% if wavefront_proxy_trace_jaeger_grpc_listener_ports is defined %}
traceJaegerGrpcListenerPorts={{ wavefront_proxy_trace_jaeger_grpc_listener_ports }}
{% endif %}
## Custom application name for traces received on Jaeger's traceJaegerListenerPorts.
#traceJaegerApplicationName=Jaeger
{% if wavefront_proxy_trace_jaeger_application_name is defined %}
traceJaegerApplicationName={{ wavefront_proxy_trace_jaeger_application_name }}
{% endif %}
## Comma-separated list of ports on which to listen on for Zipkin trace data over HTTP. Defaults to none.
## Recommended value is 9411, which is the port Zipkin's server listens on and is the default configuration in Istio.
#traceZipkinListenerPorts=9411
{% if wavefront_proxy_trace_zipkin_listener_ports is defined %}
traceZipkinListenerPorts={{ wavefront_proxy_trace_zipkin_listener_ports }}
{% endif %}
## Custom application name for traces received on Zipkin's traceZipkinListenerPorts.
#traceZipkinApplicationName=Zipkin
{% if wavefront_proxy_trace_zipkin_application_name is defined %}
traceZipkinApplicationName={{ wavefront_proxy_trace_zipkin_application_name }}
{% endif %}
## Comma-separated list of additional custom tag keys to include along as metric tags for the derived
## RED (Request, Error, Duration) metrics. Applicable to Jaeger and Zipkin integration only.
#traceDerivedCustomTagKeys=tenant, env, location
{% if wavefront_proxy_trace_derived_custom_tag_keys is defined %}
traceDerivedCustomTagKeys={{ wavefront_proxy_trace_derived_custom_tag_keys }}
{% endif %}

## The following settings are used to configure trace data sampling:
## The rate for traces to be sampled. Can be from 0.0 to 1.0. Defaults to 1.0
#traceSamplingRate=1.0
{% if wavefront_proxy_trace_sampling_rate is defined %}
traceSamplingRate={{ wavefront_proxy_trace_sampling_rate }}
{% endif %}
## The minimum duration threshold (in milliseconds) for the spans to be sampled.
## Spans above the given duration are reported. Defaults to 0 (include everything).
#traceSamplingDuration=0
{% if wavefront_proxy_trace_sampling_duration is defined %}
traceSamplingDuration={{ wavefront_proxy_trace_sampling_duration }}
{% endif %}

########################################## HISTOGRAM ACCUMULATION SETTINGS #############################################
## Histograms can be ingested in Wavefront scalar and distribution format. For scalar samples ports can be specified for
## minute, hour and day granularity. Granularity for the distribution format is encoded inline. Before using any of
## these settings, reach out to Wavefront Support to ensure your account is enabled for native Histogram support and
## to optimize the settings for your specific use case.

## Accumulation parameters
## Directory for persisting proxy state, must be writable.
#histogramStateDirectory=/var/spool/wavefront-proxy
{% if wavefront_proxy_histogram_state_directory is defined %}
histogramStateDirectory={{ wavefront_proxy_histogram_state_directory }}
{% endif %}
## Interval to write back accumulation changes to disk in milliseconds (only applicable when memory cache is enabled).
#histogramAccumulatorResolveInterval=5000
{% if wavefront_proxy_histogram_accumulator_resolve_interval is defined %}
histogramAccumulatorResolveInterval={{ wavefront_proxy_histogram_accumulator_resolve_interval }}
{% endif %}
## Interval to check for histograms ready to be sent to Wavefront, in milliseconds.
#histogramAccumulatorFlushInterval=10000
{% if wavefront_proxy_histogram_accumulator_flush_interval is defined %}
histogramAccumulatorFlushInterval={{ wavefront_proxy_histogram_accumulator_flush_interval }}
{% endif %}
## Max number of histograms to send to Wavefront in one flush (Default: no limit)
#histogramAccumulatorFlushMaxBatchSize=4000
{% if wavefront_proxy_histogram_accumulator_flush_max_batch_size is defined %}
histogramAccumulatorFlushMaxBatchSize={{ wavefront_proxy_histogram_accumulator_flush_max_batch_size }}
{% endif %}
## Maximum line length for received histogram data (Default: 65536)
#histogramMaxReceivedLength=65536
{% if wavefront_proxy_histogram_max_received_length is defined %}
histogramMaxReceivedLength={{ wavefront_proxy_histogram_max_received_length }}
{% endif %}
## Maximum allowed request size (in bytes) for incoming HTTP requests on histogram ports (Default: 16MB)
#histogramHttpBufferSize=16777216
{% if wavefront_proxy_histogram_http_buffer_size is defined %}
histogramHttpBufferSize={{ wavefront_proxy_histogram_http_buffer_size }}
{% endif %}

## Wavefront format, minute aggregation:
## Comma-separated list of ports to listen on.
#histogramMinuteListenerPorts=40001
{% if wavefront_proxy_histogram_minute_listener_ports is defined %}
histogramMinuteListenerPorts={{ wavefront_proxy_histogram_minute_listener_ports }}
{% endif %}
## Time-to-live in seconds for a minute granularity accumulation on the proxy (before the intermediary is shipped to WF).
#histogramMinuteFlushSecs=70
{% if wavefront_proxy_histogram_minute_flush_secs is defined %}
histogramMinuteFlushSecs={{ wavefront_proxy_histogram_minute_flush_secs }}
{% endif %}
## Bounds the number of centroids per histogram. Must be between 20 and 1000, default: 32
#histogramMinuteCompression=32
{% if wavefront_proxy_histogram_minute_compression is defined %}
histogramMinuteCompression={{ wavefront_proxy_histogram_minute_compression }}
{% endif %}
## Expected upper bound of concurrent accumulations. Should be approximately the number of timeseries * 2 (use a higher
## multiplier if out-of-order points more than 1 minute apart are expected). Setting this value too high will cause
## excessive disk space usage, setting this value too low may cause severe performance issues.
#histogramMinuteAccumulatorSize=1000
{% if wavefront_proxy_histogram_minute_accumulator_size is defined %}
histogramMinuteAccumulatorSize={{ wavefront_proxy_histogram_minute_accumulator_size }}
{% endif %}
## Enabling memory cache reduces I/O load with fewer time series and higher frequency data (more than 1 point per
## second per time series). Default: false
#histogramMinuteMemoryCache=false
{% if wavefront_proxy_histogram_minute_memory_cache is defined %}
histogramMinuteMemoryCache={{ wavefront_proxy_histogram_minute_memory_cache }}
{% endif %}
## Whether to persist accumulation state. When true, all histograms are written to disk immediately if memory cache is
## disabled, or every histogramAccumulatorResolveInterval seconds if memory cache is enabled.
## If accumulator is not persisted, up to histogramMinuteFlushSecs seconds worth of histograms may be lost on proxy shutdown.
#histogramMinuteAccumulatorPersisted=false
{% if wavefront_proxy_histogram_minute_accumulator_persisted is defined %}
histogramMinuteAccumulatorPersisted={{ wavefront_proxy_histogram_minute_accumulator_persisted }}
{% endif %}

## Wavefront format, hour aggregation:
## Comma-separated list of ports to listen on.
#histogramHourListenerPorts=40002
{% if wavefront_proxy_histogram_hour_listener_ports is defined %}
histogramHourListenerPorts={{ wavefront_proxy_histogram_hour_listener_ports }}
{% endif %}
## Time-to-live in seconds for an hour granularity accumulation on the proxy (before the intermediary is shipped to WF).
#histogramHourFlushSecs=4200
{% if wavefront_proxy_histogram_hour_flush_secs is defined %}
histogramHourFlushSecs={{ wavefront_proxy_histogram_hour_flush_secs }}
{% endif %}
## Bounds the number of centroids per histogram. Must be between 20 and 1000, default: 32
#histogramHourCompression=32
{% if wavefront_proxy_histogram_hour_compression is defined %}
histogramHourCompression={{ wavefront_proxy_histogram_hour_compression }}
{% endif %}
## Expected upper bound of concurrent accumulations. Should be approximately the number of timeseries * 2 (use a higher
## multiplier if out-of-order points more than 1 hour apart are expected). Setting this value too high will cause
## excessive disk space usage, setting this value too low may cause severe performance issues.
#histogramHourAccumulatorSize=100000
{% if wavefront_proxy_histogram_hour_accumulator_size is defined %}
histogramHourAccumulatorSize={{ wavefront_proxy_histogram_hour_accumulator_size }}
{% endif %}
## Enabling memory cache reduces I/O load with fewer time series and higher frequency data (more than 1 point per
## second per time series). Default: false
#histogramHourMemoryCache=true
{% if wavefront_proxy_histogram_hour_memory_cache is defined %}
histogramHourMemoryCache={{ wavefront_proxy_histogram_hour_memory_cache }}
{% endif %}
## Whether to persist accumulation state. When true, all histograms are written to disk immediately if memory cache is
## disabled, or every `histogramAccumulatorResolveInterval` seconds if memory cache is enabled.
## If accumulator is not persisted, up to `histogramHourFlushSecs` seconds worth of histograms may be lost on proxy shutdown.
#histogramHourAccumulatorPersisted=true
{% if wavefront_proxy_histogram_hour_accumulator_persisted is defined %}
histogramHourAccumulatorPersisted={{ wavefront_proxy_histogram_hour_accumulator_persisted }}
{% endif %}

## Wavefront format, day aggregation:
## Comma-separated list of ports to listen on.
#histogramDayListenerPorts=40003
{% if wavefront_proxy_histogram_day_listener_ports is defined %}
histogramDayListenerPorts={{ wavefront_proxy_histogram_day_listener_ports }}
{% endif %}
## Time-to-live in seconds for a day granularity accumulation on the proxy (before the intermediary is shipped to WF).
#histogramDayFlushSecs=18000
{% if wavefront_proxy_histogram_day_flush_secs is defined %}
histogramDayFlushSecs={{ wavefront_proxy_histogram_day_flush_secs }}
{% endif %}
## Bounds the number of centroids per histogram. Must be between 20 and 1000, default: 32
#histogramDayCompression=32
{% if wavefront_proxy_histogram_day_compression is defined %}
histogramDayCompression={{ wavefront_proxy_histogram_day_compression }}
{% endif %}
## Expected upper bound of concurrent accumulations. Should be approximately the number of timeseries * 2 (use a higher
## multiplier if out-of-order points more than 1 day apart are expected). Setting this value too high will cause
## excessive disk space usage, setting this value too low may cause severe performance issues.
#histogramDayAccumulatorSize=100000
{% if wavefront_proxy_histogram_day_accumulator_size is defined %}
histogramDayAccumulatorSize={{ wavefront_proxy_histogram_day_accumulator_size }}
{% endif %}
## Enabling memory cache reduces I/O load with fewer time series and higher frequency data (more than 1 point per
## second per time series). Default: false
#histogramDayMemoryCache=false
{% if wavefront_proxy_histogram_day_memory_cache is defined %}
histogramDayMemoryCache={{ wavefront_proxy_histogram_day_memory_cache }}
{% endif %}
## Whether to persist accumulation state. When true, all histograms are written to disk immediately if memory cache is
## disabled, or every `histogramAccumulatorResolveInterval` seconds if memory cache is enabled.
## If accumulator is not persisted, up to `histogramDayFlushSecs` seconds worth of histograms may be lost on proxy shutdown.
#histogramDayAccumulatorPersisted=true
{% if wavefront_proxy_histogram_day_accumulator_persisted is defined %}
histogramDayAccumulatorPersisted={{ wavefront_proxy_histogram_day_accumulator_persisted }}
{% endif %}

## Distribution format:
## Comma-separated list of ports to listen on.
#histogramDistListenerPorts=40000
{% if wavefront_proxy_histogram_dist_listener_ports is defined %}
histogramDistListenerPorts={{ wavefront_proxy_histogram_dist_listener_ports }}
{% endif %}
## Time-to-live in seconds for a distribution accumulation on the proxy (before the intermediary is shipped to WF).
#histogramDistFlushSecs=70
{% if wavefront_proxy_histogram_dist_flush_secs is defined %}
histogramDistFlushSecs={{ wavefront_proxy_histogram_dist_flush_secs }}
{% endif %}
## Bounds the number of centroids per histogram. Must be between 20 and 1000, default: 32
#histogramDistCompression=32
{% if wavefront_proxy_histogram_dist_compression is defined %}
histogramDistCompression={{ wavefront_proxy_histogram_dist_compression }}
{% endif %}
## Expected upper bound of concurrent accumulations. Should be approximately the number of timeseries * 2 (use a higher
## multiplier if out-of-order points more than 1 bin apart are expected). Setting this value too high will cause
## excessive disk space usage, setting this value too low may cause severe performance issues.
#histogramDistAccumulatorSize=100000
{% if wavefront_proxy_histogram_dist_accumulator_size is defined %}
histogramDistAccumulatorSize={{ wavefront_proxy_histogram_dist_accumulator_size }}
{% endif %}
## Enabling memory cache reduces I/O load with fewer time series and higher frequency data (more than 1 point per
## second per time series). Default: false
#histogramDistMemoryCache=false
{% if wavefront_proxy_histogram_dist_memory_cache is defined %}
pushListenerMaxReceivedLength={{ wavefront_proxy_histogram_dist_memory_cache }}
{% endif %}
## Whether to persist accumulation state. When true, all histograms are written to disk immediately if memory cache is
## disabled, or every histogramAccumulatorResolveInterval seconds if memory cache is enabled.
## If accumulator is not persisted, up to histogramDistFlushSecs seconds worth of histograms may be lost on proxy shutdown.
#histogramDistAccumulatorPersisted=true
{% if wavefront_proxy_histogram_dist_accumulator_persisted is defined %}
histogramDistAccumulatorPersisted={{ wavefront_proxy_histogram_dist_accumulator_persisted }}
{% endif %}

## Histogram accumulation for relay ports (only applicable if pushRelayHistogramAggregator is true):
## Time-to-live in seconds for the accumulator (before the intermediary is shipped to WF). Default: 70
#pushRelayHistogramAggregatorFlushSecs=70
{% if wavefront_proxy_push_relay_histogram_aggregator_flush_secs is defined %}
pushRelayHistogramAggregatorFlushSecs={{ wavefront_proxy_push_relay_histogram_aggregator_flush_secs }}
{% endif %}
## Bounds the number of centroids per histogram. Must be between 20 and 1000, default: 32
#pushRelayHistogramAggregatorCompression=32
{% if wavefront_proxy_push_relay_histogram_aggregator_compression is defined %}
pushRelayHistogramAggregatorCompression={{ wavefront_proxy_push_relay_histogram_aggregator_compression }}
{% endif %}
## Expected upper bound of concurrent accumulations. Should be approximately the number of timeseries * 2 (use a higher
## multiplier if out-of-order points more than 1 bin apart are expected). Setting this value too high will cause
## excessive disk space usage, setting this value too low may cause severe performance issues.
#pushRelayHistogramAggregatorAccumulatorSize=1000000
{% if wavefront_proxy_push_relay_histogram_aggregator_accumulator_size is defined %}
pushRelayHistogramAggregatorAccumulatorSize={{ wavefront_proxy_push_relay_histogram_aggregator_accumulator_size }}
{% endif %}
